// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id
  name          String
  email         String
  emailVerified Boolean @default(false)
  image         String?

  age        Int?
  heightCm   Float? // Height in centimeters
  weightKg   Float? // Weight in kilograms
  gender     String? // e.g., "male", "female", "other"
  bloodGroup String? // e.g., "A+", "O-", etc.
  allergies  String? //  allergies

  dailyHealthRecords DailyHealthRecord[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  sessions  Session[]
  accounts  Account[]

  @@unique([email])
  @@map("user")
}

model DailyHealthRecord {
  id     String   @id @default(uuid())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date   DateTime @default(now())

  // Diet and health tracking fields
  proteinIntake  Float? // grams
  carbIntake     Float? // grams
  fatIntake      Float? // grams
  caloriesIntake Float? // kcal
  caloriesBurnt  Float? // kcal
  sleepHours     Float? // hours
  waterIntake    Float? // liters

  healthScore Int? // e.g., 1-10 scale

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, date])
  @@map("daily_health_record")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
